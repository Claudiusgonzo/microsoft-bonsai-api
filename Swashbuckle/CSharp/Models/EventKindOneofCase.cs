// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Bonsai.SimulatorApi.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for EventKindOneofCase.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum EventKindOneofCase
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "EpisodeStart")]
        EpisodeStart,
        [EnumMember(Value = "EpisodeStep")]
        EpisodeStep,
        [EnumMember(Value = "EpisodeFinish")]
        EpisodeFinish,
        [EnumMember(Value = "PlaybackStart")]
        PlaybackStart,
        [EnumMember(Value = "PlaybackStep")]
        PlaybackStep,
        [EnumMember(Value = "PlaybackFinish")]
        PlaybackFinish,
        [EnumMember(Value = "Idle")]
        Idle,
        [EnumMember(Value = "Registered")]
        Registered,
        [EnumMember(Value = "Unregister")]
        Unregister
    }
    internal static class EventKindOneofCaseEnumExtension
    {
        internal static string ToSerializedValue(this EventKindOneofCase? value)
        {
            return value == null ? null : ((EventKindOneofCase)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this EventKindOneofCase value)
        {
            switch( value )
            {
                case EventKindOneofCase.None:
                    return "None";
                case EventKindOneofCase.EpisodeStart:
                    return "EpisodeStart";
                case EventKindOneofCase.EpisodeStep:
                    return "EpisodeStep";
                case EventKindOneofCase.EpisodeFinish:
                    return "EpisodeFinish";
                case EventKindOneofCase.PlaybackStart:
                    return "PlaybackStart";
                case EventKindOneofCase.PlaybackStep:
                    return "PlaybackStep";
                case EventKindOneofCase.PlaybackFinish:
                    return "PlaybackFinish";
                case EventKindOneofCase.Idle:
                    return "Idle";
                case EventKindOneofCase.Registered:
                    return "Registered";
                case EventKindOneofCase.Unregister:
                    return "Unregister";
            }
            return null;
        }

        internal static EventKindOneofCase? ParseEventKindOneofCase(this string value)
        {
            switch( value )
            {
                case "None":
                    return EventKindOneofCase.None;
                case "EpisodeStart":
                    return EventKindOneofCase.EpisodeStart;
                case "EpisodeStep":
                    return EventKindOneofCase.EpisodeStep;
                case "EpisodeFinish":
                    return EventKindOneofCase.EpisodeFinish;
                case "PlaybackStart":
                    return EventKindOneofCase.PlaybackStart;
                case "PlaybackStep":
                    return EventKindOneofCase.PlaybackStep;
                case "PlaybackFinish":
                    return EventKindOneofCase.PlaybackFinish;
                case "Idle":
                    return EventKindOneofCase.Idle;
                case "Registered":
                    return EventKindOneofCase.Registered;
                case "Unregister":
                    return EventKindOneofCase.Unregister;
            }
            return null;
        }
    }
}
