// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Bonsai.SimulatorApi.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for UnregisterTypesReason.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum UnregisterTypesReason
    {
        [EnumMember(Value = "Unspecified")]
        Unspecified,
        [EnumMember(Value = "Finished")]
        Finished,
        [EnumMember(Value = "Error")]
        Error,
        [EnumMember(Value = "NotFound")]
        NotFound
    }
    internal static class UnregisterTypesReasonEnumExtension
    {
        internal static string ToSerializedValue(this UnregisterTypesReason? value)
        {
            return value == null ? null : ((UnregisterTypesReason)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this UnregisterTypesReason value)
        {
            switch( value )
            {
                case UnregisterTypesReason.Unspecified:
                    return "Unspecified";
                case UnregisterTypesReason.Finished:
                    return "Finished";
                case UnregisterTypesReason.Error:
                    return "Error";
                case UnregisterTypesReason.NotFound:
                    return "NotFound";
            }
            return null;
        }

        internal static UnregisterTypesReason? ParseUnregisterTypesReason(this string value)
        {
            switch( value )
            {
                case "Unspecified":
                    return UnregisterTypesReason.Unspecified;
                case "Finished":
                    return UnregisterTypesReason.Finished;
                case "Error":
                    return UnregisterTypesReason.Error;
                case "NotFound":
                    return UnregisterTypesReason.NotFound;
            }
            return null;
        }
    }
}
