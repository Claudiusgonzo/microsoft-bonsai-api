/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";

/**
 * An interface representing PurposeTarget.
 */
export interface PurposeTarget {
  workspaceName?: string;
  brainName?: string;
  brainVersion?: number;
  conceptName?: string;
}

/**
 * An interface representing Purpose.
 */
export interface Purpose {
  /**
   * Possible values include: 'Inactive', 'Debug', 'Train', 'Assess'
   */
  action?: PurposeTypesAction;
  target?: PurposeTarget;
}

/**
 * An interface representing SimulatorContext.
 */
export interface SimulatorContext {
  /**
   * Possible values include: 'Unspecified', 'Hosted', 'Testing'
   */
  deploymentMode?: SimulatorContextTypesDeploymentMode;
  deploymentDetails?: string;
  simulatorClientId?: string;
  collection?: string;
  packageProperty?: string;
  purpose?: Purpose;
}

/**
 * An interface representing SimulatorSessionSummary.
 */
export interface SimulatorSessionSummary {
  sessionId?: string;
  /**
   * Possible values include: 'Deregistered', 'Attachable', 'Attached', 'Detaching', 'Rejected'
   */
  sessionStatus?: SimulatorSessionTypesStatus;
  simulatorName?: string;
  simulatorContext?: SimulatorContext;
}

/**
 * An interface representing ProblemDetails.
 */
export interface ProblemDetails {
  type?: string;
  title?: string;
  status?: number;
  detail?: string;
  instance?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly extensions?: { [propertyName: string]: any };
}

/**
 * An interface representing SimulatorInterface.
 */
export interface SimulatorInterface {
  name?: string;
  timeout?: number;
  capabilities?: any;
  simulatorContext?: string;
  description?: any;
}

/**
 * An interface representing SimulatorSessionMilestone.
 */
export interface SimulatorSessionMilestone {
  firstTime?: Date;
}

/**
 * An interface representing SimulatorSessionProgress.
 */
export interface SimulatorSessionProgress {
  attached?: SimulatorSessionMilestone;
  iterated?: SimulatorSessionMilestone;
}

/**
 * An interface representing SimulatorSessionResponse.
 */
export interface SimulatorSessionResponse {
  sessionId: string;
  /**
   * Possible values include: 'Deregistered', 'Attachable', 'Attached', 'Detaching', 'Rejected'
   */
  sessionStatus?: SimulatorSessionTypesStatus;
  sessionProgress?: SimulatorSessionProgress;
  interfaceProperty?: SimulatorInterface;
  simulatorContext?: SimulatorContext;
  registrationTime: Date;
  lastSeenTime: Date;
  iterationRate?: number;
  details?: string;
}

/**
 * An interface representing EpisodeStart.
 */
export interface EpisodeStart {
  config?: any;
}

/**
 * An interface representing Step.
 */
export interface Step {
  action?: any;
}

/**
 * An interface representing EpisodeFinish.
 */
export interface EpisodeFinish {
  /**
   * Possible values include: 'Invalid', 'Unspecified', 'LessonChanged', 'Terminal', 'Interrupted'
   */
  reason?: EpisodeFinishTypesReason;
}

/**
 * An interface representing Idle.
 */
export interface Idle {
  callbackTime?: number;
}

/**
 * An interface representing Unregister.
 */
export interface Unregister {
  /**
   * Possible values include: 'Unspecified', 'Finished', 'Error', 'NotFound'
   */
  reason?: UnregisterTypesReason;
  details?: string;
}

/**
 * An interface representing Event.
 */
export interface Event {
  /**
   * Possible values include: 'Unspecified', 'EpisodeStart', 'EpisodeStep', 'EpisodeFinish',
   * 'PlaybackStart', 'PlaybackStep', 'PlaybackFinish', 'Idle', 'Registered', 'Unregister'
   */
  type?: EventTypesEventType;
  sessionId?: string;
  sequenceId?: number;
  episodeStart?: EpisodeStart;
  episodeStep?: Step;
  episodeFinish?: EpisodeFinish;
  playbackStart?: any;
  playbackStep?: any;
  playbackFinish?: any;
  idle?: Idle;
  registered?: any;
  unregister?: Unregister;
  /**
   * Possible values include: 'None', 'EpisodeStart', 'EpisodeStep', 'EpisodeFinish',
   * 'PlaybackStart', 'PlaybackStep', 'PlaybackFinish', 'Idle', 'Registered', 'Unregister'
   */
  kindCase?: EventKindOneofCase;
}

/**
 * An interface representing SimulatorState.
 */
export interface SimulatorState {
  sessionId?: string;
  sequenceId?: number;
  state?: any;
  halted?: boolean;
  error?: string;
}

/**
 * An interface representing SimulatorAPIOptions.
 */
export interface SimulatorAPIOptions extends ServiceClientOptions {
  baseUri?: string;
}

/**
 * Optional Parameters.
 */
export interface SessionListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A specifier to filter on deployment mode
   */
  deploymentMode?: string;
  /**
   * A specifier to filter on session status
   */
  sessionStatus?: string;
  /**
   * If present, only sessions in this collection
   */
  collection?: string;
  /**
   * If present, only sessions in this package
   */
  packageParameter?: string;
}

/**
 * Optional Parameters.
 */
export interface SessionCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Information and capabilities about the simulator.
   */
  body?: SimulatorInterface;
}

/**
 * Optional Parameters.
 */
export interface SessionAdvanceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The new state of the simulator.
   */
  body?: SimulatorState;
}

/**
 * Defines values for SimulatorSessionTypesStatus.
 * Possible values include: 'Deregistered', 'Attachable', 'Attached', 'Detaching', 'Rejected'
 * @readonly
 * @enum {string}
 */
export type SimulatorSessionTypesStatus = 'Deregistered' | 'Attachable' | 'Attached' | 'Detaching' | 'Rejected';

/**
 * Defines values for SimulatorContextTypesDeploymentMode.
 * Possible values include: 'Unspecified', 'Hosted', 'Testing'
 * @readonly
 * @enum {string}
 */
export type SimulatorContextTypesDeploymentMode = 'Unspecified' | 'Hosted' | 'Testing';

/**
 * Defines values for PurposeTypesAction.
 * Possible values include: 'Inactive', 'Debug', 'Train', 'Assess'
 * @readonly
 * @enum {string}
 */
export type PurposeTypesAction = 'Inactive' | 'Debug' | 'Train' | 'Assess';

/**
 * Defines values for EventTypesEventType.
 * Possible values include: 'Unspecified', 'EpisodeStart', 'EpisodeStep', 'EpisodeFinish',
 * 'PlaybackStart', 'PlaybackStep', 'PlaybackFinish', 'Idle', 'Registered', 'Unregister'
 * @readonly
 * @enum {string}
 */
export type EventTypesEventType = 'Unspecified' | 'EpisodeStart' | 'EpisodeStep' | 'EpisodeFinish' | 'PlaybackStart' | 'PlaybackStep' | 'PlaybackFinish' | 'Idle' | 'Registered' | 'Unregister';

/**
 * Defines values for EpisodeFinishTypesReason.
 * Possible values include: 'Invalid', 'Unspecified', 'LessonChanged', 'Terminal', 'Interrupted'
 * @readonly
 * @enum {string}
 */
export type EpisodeFinishTypesReason = 'Invalid' | 'Unspecified' | 'LessonChanged' | 'Terminal' | 'Interrupted';

/**
 * Defines values for UnregisterTypesReason.
 * Possible values include: 'Unspecified', 'Finished', 'Error', 'NotFound'
 * @readonly
 * @enum {string}
 */
export type UnregisterTypesReason = 'Unspecified' | 'Finished' | 'Error' | 'NotFound';

/**
 * Defines values for EventKindOneofCase.
 * Possible values include: 'None', 'EpisodeStart', 'EpisodeStep', 'EpisodeFinish',
 * 'PlaybackStart', 'PlaybackStep', 'PlaybackFinish', 'Idle', 'Registered', 'Unregister'
 * @readonly
 * @enum {string}
 */
export type EventKindOneofCase = 'None' | 'EpisodeStart' | 'EpisodeStep' | 'EpisodeFinish' | 'PlaybackStart' | 'PlaybackStep' | 'PlaybackFinish' | 'Idle' | 'Registered' | 'Unregister';

/**
 * Contains response data for the list operation.
 */
export type SessionListResponse = Array<SimulatorSessionSummary> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SimulatorSessionSummary[];
    };
};

/**
 * Contains response data for the create operation.
 */
export type SessionCreateResponse = SimulatorSessionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SimulatorSessionResponse;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SessionGetResponse = SimulatorSessionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SimulatorSessionResponse;
    };
};

/**
 * Contains response data for the getMostRecentAction operation.
 */
export type SessionGetMostRecentActionResponse = Event & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Event;
    };
};

/**
 * Contains response data for the advance operation.
 */
export type SessionAdvanceResponse = Event & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Event;
    };
};
