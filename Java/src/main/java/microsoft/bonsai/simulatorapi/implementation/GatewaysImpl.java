/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.bonsai.simulatorapi.implementation;

import retrofit2.Retrofit;
import microsoft.bonsai.simulatorapi.Gateways;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Streaming;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Gateways.
 */
public class GatewaysImpl implements Gateways {
    /** The Retrofit service to perform REST calls. */
    private GatewaysService service;
    /** The service client containing this operation class. */
    private SimulatorAPIImpl client;

    /**
     * Initializes an instance of Gateways.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public GatewaysImpl(Retrofit retrofit, SimulatorAPIImpl client) {
        this.service = retrofit.create(GatewaysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Gateways to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GatewaysService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: microsoft.bonsai.simulatorapi.Gateways ping" })
        @GET("v2/simgateway/ping")
        @Streaming
        Observable<Response<ResponseBody>> ping();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: microsoft.bonsai.simulatorapi.Gateways status" })
        @GET("v2/simgateway/status")
        Observable<Response<ResponseBody>> status();

    }

    /**
     * Implementaton of the GET /v2/ping endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream ping() {
        return pingWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Implementaton of the GET /v2/ping endpoint.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> pingAsync(final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(pingWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Implementaton of the GET /v2/ping endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> pingAsync() {
        return pingWithServiceResponseAsync().map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * Implementaton of the GET /v2/ping endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> pingWithServiceResponseAsync() {
        return service.ping()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = pingDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InputStream> pingDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<InputStream, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InputStream>() { }.getType())
                .build(response);
    }

    /**
     * Implementaton of the GET /v2/status endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String status() {
        return statusWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Implementaton of the GET /v2/status endpoint.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> statusAsync(final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromResponse(statusWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Implementaton of the GET /v2/status endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> statusAsync() {
        return statusWithServiceResponseAsync().map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.body();
            }
        });
    }

    /**
     * Implementaton of the GET /v2/status endpoint.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> statusWithServiceResponseAsync() {
        return service.status()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = statusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> statusDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<String, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<String>() { }.getType())
                .build(response);
    }

}
