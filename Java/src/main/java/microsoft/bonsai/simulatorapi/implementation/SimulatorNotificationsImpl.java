/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.bonsai.simulatorapi.implementation;

import retrofit2.Retrofit;
import microsoft.bonsai.simulatorapi.SimulatorNotifications;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Streaming;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SimulatorNotifications.
 */
public class SimulatorNotificationsImpl implements SimulatorNotifications {
    /** The Retrofit service to perform REST calls. */
    private SimulatorNotificationsService service;
    /** The service client containing this operation class. */
    private SimulatorAPIImpl client;

    /**
     * Initializes an instance of SimulatorNotifications.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SimulatorNotificationsImpl(Retrofit retrofit, SimulatorAPIImpl client) {
        this.service = retrofit.create(SimulatorNotificationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SimulatorNotifications to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SimulatorNotificationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: microsoft.bonsai.simulatorapi.SimulatorNotifications index" })
        @POST("v2/workspaces/{workspaceName}/simulators/{sessionId}/simulatorHub/negotiate")
        @Streaming
        Observable<Response<ResponseBody>> index(@Path("workspaceName") String workspaceName, @Path("sessionId") String sessionId, @Query("user") String user);

    }

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream index(String workspaceName, String sessionId) {
        return indexWithServiceResponseAsync(workspaceName, sessionId).toBlocking().single().body();
    }

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> indexAsync(String workspaceName, String sessionId, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(indexWithServiceResponseAsync(workspaceName, sessionId), serviceCallback);
    }

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> indexAsync(String workspaceName, String sessionId) {
        return indexWithServiceResponseAsync(workspaceName, sessionId).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> indexWithServiceResponseAsync(String workspaceName, String sessionId) {
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sessionId == null) {
            throw new IllegalArgumentException("Parameter sessionId is required and cannot be null.");
        }
        final String user = null;
        return service.index(workspaceName, sessionId, user)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = indexDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param user unique user session identifier. SignalR clients send this as user, but this is internally used as user session id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream index(String workspaceName, String sessionId, String user) {
        return indexWithServiceResponseAsync(workspaceName, sessionId, user).toBlocking().single().body();
    }

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param user unique user session identifier. SignalR clients send this as user, but this is internally used as user session id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> indexAsync(String workspaceName, String sessionId, String user, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(indexWithServiceResponseAsync(workspaceName, sessionId, user), serviceCallback);
    }

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param user unique user session identifier. SignalR clients send this as user, but this is internally used as user session id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> indexAsync(String workspaceName, String sessionId, String user) {
        return indexWithServiceResponseAsync(workspaceName, sessionId, user).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param user unique user session identifier. SignalR clients send this as user, but this is internally used as user session id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> indexWithServiceResponseAsync(String workspaceName, String sessionId, String user) {
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (sessionId == null) {
            throw new IllegalArgumentException("Parameter sessionId is required and cannot be null.");
        }
        return service.index(workspaceName, sessionId, user)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = indexDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InputStream> indexDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InputStream, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InputStream>() { }.getType())
                .build(response);
    }

}
