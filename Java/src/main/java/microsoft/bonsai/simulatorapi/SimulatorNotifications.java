/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.bonsai.simulatorapi;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SimulatorNotifications.
 */
public interface SimulatorNotifications {
    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    InputStream index(String workspaceName, String sessionId);

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> indexAsync(String workspaceName, String sessionId, final ServiceCallback<InputStream> serviceCallback);

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> indexAsync(String workspaceName, String sessionId);

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponse<InputStream>> indexWithServiceResponseAsync(String workspaceName, String sessionId);
    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param user unique user session identifier. SignalR clients send this as user, but this is internally used as user session id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    InputStream index(String workspaceName, String sessionId, String user);

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param user unique user session identifier. SignalR clients send this as user, but this is internally used as user session id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> indexAsync(String workspaceName, String sessionId, String user, final ServiceCallback<InputStream> serviceCallback);

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param user unique user session identifier. SignalR clients send this as user, but this is internally used as user session id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> indexAsync(String workspaceName, String sessionId, String user);

    /**
     * http post/negotiate endpoint to broker connection to Azure SignalR Service.
     *
     * @param workspaceName workspace information for subscription grain
     * @param sessionId simulator identifier
     * @param user unique user session identifier. SignalR clients send this as user, but this is internally used as user session id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponse<InputStream>> indexWithServiceResponseAsync(String workspaceName, String sessionId, String user);

}
