/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package microsoft.bonsai.simulatorapi;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import microsoft.bonsai.simulatorapi.models.Event;
import microsoft.bonsai.simulatorapi.models.SimulatorInterface;
import microsoft.bonsai.simulatorapi.models.SimulatorState;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Simulators.
 */
public interface Simulators {
    /**
     * Implementaton of the GET /v2/.../simulators endpoint.
     * Retrieves all of the simulators currently registered with all
     simulator gateways within this workspace.
     The deployment_mode appears in the query string. It can be one of
     Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
     e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
     simulators that are hosted.
     *
     * @param workspaceName The workspace identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object listSimulators(String workspaceName);

    /**
     * Implementaton of the GET /v2/.../simulators endpoint.
     * Retrieves all of the simulators currently registered with all
     simulator gateways within this workspace.
     The deployment_mode appears in the query string. It can be one of
     Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
     e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
     simulators that are hosted.
     *
     * @param workspaceName The workspace identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> listSimulatorsAsync(String workspaceName, final ServiceCallback<Object> serviceCallback);

    /**
     * Implementaton of the GET /v2/.../simulators endpoint.
     * Retrieves all of the simulators currently registered with all
     simulator gateways within this workspace.
     The deployment_mode appears in the query string. It can be one of
     Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
     e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
     simulators that are hosted.
     *
     * @param workspaceName The workspace identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> listSimulatorsAsync(String workspaceName);

    /**
     * Implementaton of the GET /v2/.../simulators endpoint.
     * Retrieves all of the simulators currently registered with all
     simulator gateways within this workspace.
     The deployment_mode appears in the query string. It can be one of
     Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
     e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
     simulators that are hosted.
     *
     * @param workspaceName The workspace identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> listSimulatorsWithServiceResponseAsync(String workspaceName);
    /**
     * Implementaton of the GET /v2/.../simulators endpoint.
     * Retrieves all of the simulators currently registered with all
     simulator gateways within this workspace.
     The deployment_mode appears in the query string. It can be one of
     Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
     e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
     simulators that are hosted.
     *
     * @param workspaceName The workspace identifier.
     * @param deploymentMode A specifier to filter on deployment mode
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object listSimulators(String workspaceName, String deploymentMode);

    /**
     * Implementaton of the GET /v2/.../simulators endpoint.
     * Retrieves all of the simulators currently registered with all
     simulator gateways within this workspace.
     The deployment_mode appears in the query string. It can be one of
     Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
     e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
     simulators that are hosted.
     *
     * @param workspaceName The workspace identifier.
     * @param deploymentMode A specifier to filter on deployment mode
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> listSimulatorsAsync(String workspaceName, String deploymentMode, final ServiceCallback<Object> serviceCallback);

    /**
     * Implementaton of the GET /v2/.../simulators endpoint.
     * Retrieves all of the simulators currently registered with all
     simulator gateways within this workspace.
     The deployment_mode appears in the query string. It can be one of
     Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
     e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
     simulators that are hosted.
     *
     * @param workspaceName The workspace identifier.
     * @param deploymentMode A specifier to filter on deployment mode
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> listSimulatorsAsync(String workspaceName, String deploymentMode);

    /**
     * Implementaton of the GET /v2/.../simulators endpoint.
     * Retrieves all of the simulators currently registered with all
     simulator gateways within this workspace.
     The deployment_mode appears in the query string. It can be one of
     Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
     e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
     simulators that are hosted.
     *
     * @param workspaceName The workspace identifier.
     * @param deploymentMode A specifier to filter on deployment mode
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> listSimulatorsWithServiceResponseAsync(String workspaceName, String deploymentMode);

    /**
     * Implementation of the PUT /v2/.../simulators endpoint.
     * Registers a simulator with the simulator gateway.
     *
     * @param workspaceName The workspace identifier.
     * @param registrationInfo Information and capabilities about the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Event object if successful.
     */
    Event registerSimulator(String workspaceName, SimulatorInterface registrationInfo);

    /**
     * Implementation of the PUT /v2/.../simulators endpoint.
     * Registers a simulator with the simulator gateway.
     *
     * @param workspaceName The workspace identifier.
     * @param registrationInfo Information and capabilities about the simulator.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Event> registerSimulatorAsync(String workspaceName, SimulatorInterface registrationInfo, final ServiceCallback<Event> serviceCallback);

    /**
     * Implementation of the PUT /v2/.../simulators endpoint.
     * Registers a simulator with the simulator gateway.
     *
     * @param workspaceName The workspace identifier.
     * @param registrationInfo Information and capabilities about the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Event object
     */
    Observable<Event> registerSimulatorAsync(String workspaceName, SimulatorInterface registrationInfo);

    /**
     * Implementation of the PUT /v2/.../simulators endpoint.
     * Registers a simulator with the simulator gateway.
     *
     * @param workspaceName The workspace identifier.
     * @param registrationInfo Information and capabilities about the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Event object
     */
    Observable<ServiceResponse<Event>> registerSimulatorWithServiceResponseAsync(String workspaceName, SimulatorInterface registrationInfo);

    /**
     * Implementation of the GET /v2/.../simulators/{sessionId} endpoint.
     * Gets the most recent action sent to the simulator to process.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString Unique identification of the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Event object if successful.
     */
    Event getMostRecentAction(String workspaceName, String sessionIdString);

    /**
     * Implementation of the GET /v2/.../simulators/{sessionId} endpoint.
     * Gets the most recent action sent to the simulator to process.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString Unique identification of the simulator.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Event> getMostRecentActionAsync(String workspaceName, String sessionIdString, final ServiceCallback<Event> serviceCallback);

    /**
     * Implementation of the GET /v2/.../simulators/{sessionId} endpoint.
     * Gets the most recent action sent to the simulator to process.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString Unique identification of the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Event object
     */
    Observable<Event> getMostRecentActionAsync(String workspaceName, String sessionIdString);

    /**
     * Implementation of the GET /v2/.../simulators/{sessionId} endpoint.
     * Gets the most recent action sent to the simulator to process.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString Unique identification of the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Event object
     */
    Observable<ServiceResponse<Event>> getMostRecentActionWithServiceResponseAsync(String workspaceName, String sessionIdString);

    /**
     * Implementation of the POST /v2/.../simulators/{sessionId}
     endpoint.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString Unique identifier for the simulator.
     * @param state The new state of the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Event object if successful.
     */
    Event advance(String workspaceName, String sessionIdString, SimulatorState state);

    /**
     * Implementation of the POST /v2/.../simulators/{sessionId}
     endpoint.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString Unique identifier for the simulator.
     * @param state The new state of the simulator.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Event> advanceAsync(String workspaceName, String sessionIdString, SimulatorState state, final ServiceCallback<Event> serviceCallback);

    /**
     * Implementation of the POST /v2/.../simulators/{sessionId}
     endpoint.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString Unique identifier for the simulator.
     * @param state The new state of the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Event object
     */
    Observable<Event> advanceAsync(String workspaceName, String sessionIdString, SimulatorState state);

    /**
     * Implementation of the POST /v2/.../simulators/{sessionId}
     endpoint.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString Unique identifier for the simulator.
     * @param state The new state of the simulator.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Event object
     */
    Observable<ServiceResponse<Event>> advanceWithServiceResponseAsync(String workspaceName, String sessionIdString, SimulatorState state);

    /**
     * Implementation of the DELETE /v2/.../simulators endpoint.
     * Unregisters the simulator with the simulator gateway.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString The session ID generated during registration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    InputStream deregisterSimulator(String workspaceName, String sessionIdString);

    /**
     * Implementation of the DELETE /v2/.../simulators endpoint.
     * Unregisters the simulator with the simulator gateway.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString The session ID generated during registration
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InputStream> deregisterSimulatorAsync(String workspaceName, String sessionIdString, final ServiceCallback<InputStream> serviceCallback);

    /**
     * Implementation of the DELETE /v2/.../simulators endpoint.
     * Unregisters the simulator with the simulator gateway.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString The session ID generated during registration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<InputStream> deregisterSimulatorAsync(String workspaceName, String sessionIdString);

    /**
     * Implementation of the DELETE /v2/.../simulators endpoint.
     * Unregisters the simulator with the simulator gateway.
     *
     * @param workspaceName The workspace identifier.
     * @param sessionIdString The session ID generated during registration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    Observable<ServiceResponse<InputStream>> deregisterSimulatorWithServiceResponseAsync(String workspaceName, String sessionIdString);

}
