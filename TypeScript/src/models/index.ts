/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";

/**
 * An interface representing SimulatorInterface.
 */
export interface SimulatorInterface {
  name?: string;
  timeout: number;
  capabilities?: { [propertyName: string]: any };
  simulatorContext?: string;
  description?: { [propertyName: string]: any };
}

/**
 * An interface representing PurposeTarget.
 */
export interface PurposeTarget {
  workspaceName?: string;
  brainName?: string;
  brainVersion: number;
  conceptName?: string;
}

/**
 * An interface representing Purpose.
 */
export interface Purpose {
  action: number;
  target?: PurposeTarget;
}

/**
 * An interface representing SimulatorContext.
 */
export interface SimulatorContext {
  deploymentMode: number;
  deploymentDetails?: string;
  simulatorClientId?: string;
  collection?: string;
  packageProperty?: string;
  purpose?: Purpose;
}

/**
 * An interface representing Timestamp.
 */
export interface Timestamp {
  seconds: number;
  nanos: number;
}

/**
 * An interface representing SimulatorInfo.
 */
export interface SimulatorInfo {
  interfaceProperty?: SimulatorInterface;
  simulatorContext?: SimulatorContext;
  lastSeen?: Timestamp;
  registrationTime?: Timestamp;
  details?: string;
  iterationRate: number;
  sessionStatus: number;
}

/**
 * An interface representing SimulatorList.
 */
export interface SimulatorList {
  simulators?: { [propertyName: string]: SimulatorInfo };
}

/**
 * An interface representing ProblemDetails.
 */
export interface ProblemDetails {
  type?: string;
  title?: string;
  status?: number;
  detail?: string;
  instance?: string;
  extensions?: { [propertyName: string]: any };
}

/**
 * An interface representing ListValue.
 */
export interface ListValue {
  values?: Value[];
}

/**
 * An interface representing Value.
 */
export interface Value {
  numberValue: number;
  stringValue?: string;
  boolValue: boolean;
  structValue?: { [propertyName: string]: any };
  listValue?: ListValue;
  kindCase: number;
}

/**
 * An interface representing EpisodeStart.
 */
export interface EpisodeStart {
  config?: Value;
}

/**
 * An interface representing Step.
 */
export interface Step {
  action?: Value;
}

/**
 * An interface representing EpisodeFinish.
 */
export interface EpisodeFinish {
  reason: number;
}

/**
 * An interface representing Idle.
 */
export interface Idle {
  callbackTime: number;
}

/**
 * An interface representing Unregister.
 */
export interface Unregister {
  reason: number;
  details?: string;
}

/**
 * An interface representing Event.
 */
export interface Event {
  type: number;
  sessionId?: string;
  sequenceId: number;
  episodeStart?: EpisodeStart;
  episodeStep?: Step;
  episodeFinish?: EpisodeFinish;
  playbackStart?: any;
  playbackStep?: any;
  playbackFinish?: any;
  idle?: Idle;
  registered?: any;
  unregister?: Unregister;
  kindCase: number;
}

/**
 * An interface representing SimulatorState.
 */
export interface SimulatorState {
  sessionId?: string;
  sequenceId: number;
  state?: Value;
  halted?: boolean;
  error?: string;
}

/**
 * An interface representing SimulatorSessionSummary.
 */
export interface SimulatorSessionSummary {
  sessionId?: string;
  sessionStatus: number;
  simulatorName?: string;
  simulatorContext?: SimulatorContext;
}

/**
 * An interface representing SimulatorSessionMilestone.
 */
export interface SimulatorSessionMilestone {
  firstTime?: Timestamp;
}

/**
 * An interface representing SimulatorSessionProgress.
 */
export interface SimulatorSessionProgress {
  attached?: SimulatorSessionMilestone;
  iterated?: SimulatorSessionMilestone;
}

/**
 * An interface representing SimulatorSession.
 */
export interface SimulatorSession {
  sessionId?: string;
  sessionStatus: number;
  sessionProgress?: SimulatorSessionProgress;
  interfaceProperty?: SimulatorInterface;
  simulatorContext?: SimulatorContext;
  registrationTime?: Timestamp;
  lastSeenTime?: Timestamp;
  iterationRate: number;
  details?: string;
}

/**
 * An interface representing SimulatorAPIOptions.
 */
export interface SimulatorAPIOptions extends ServiceClientOptions {
  baseUri?: string;
}

/**
 * Optional Parameters.
 */
export interface SimulatorNotificationIndexOptionalParams extends msRest.RequestOptionsBase {
  /**
   * unique user session identifier. SignalR clients send this as user, but this is internally used
   * as user session id
   */
  user?: string;
}

/**
 * Optional Parameters.
 */
export interface SimulatorsListSimulatorsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A specifier to filter on deployment mode
   */
  deploymentMode?: string;
}

/**
 * Optional Parameters.
 */
export interface SimulatorSessionListSessionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A specifier to filter on deployment mode
   */
  deploymentMode?: string;
  /**
   * A specifier to filter on session status
   */
  sessionStatus?: string;
  /**
   * If present, only sessions in this collection
   */
  collection?: string;
  /**
   * If present, only sessions in this package
   */
  packageParameter?: string;
}

/**
 * Contains response data for the ping operation.
 */
export type GatewayPingResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;

  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse;
};

/**
 * Contains response data for the status operation.
 */
export type GatewayStatusResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the index operation.
 */
export type SimulatorNotificationIndexResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;

  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse;
};

/**
 * Contains response data for the listSimulators operation.
 */
export type SimulatorsListSimulatorsResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the registerSimulator operation.
 */
export type SimulatorsRegisterSimulatorResponse = Event & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Event;
    };
};

/**
 * Contains response data for the getMostRecentAction operation.
 */
export type SimulatorsGetMostRecentActionResponse = Event & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Event;
    };
};

/**
 * Contains response data for the advance operation.
 */
export type SimulatorsAdvanceResponse = Event & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Event;
    };
};

/**
 * Contains response data for the deregisterSimulator operation.
 */
export type SimulatorsDeregisterSimulatorResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;

  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse;
};

/**
 * Contains response data for the listSessions operation.
 */
export type SimulatorSessionListSessionsResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the registerSimulator operation.
 */
export type SimulatorSessionRegisterSimulatorResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the describeOneSession operation.
 */
export type SimulatorSessionDescribeOneSessionResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the deregisterSimulator operation.
 */
export type SimulatorSessionDeregisterSimulatorResponse = ProblemDetails & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProblemDetails;
    };
};

/**
 * Contains response data for the getMostRecentAction operation.
 */
export type SimulatorSessionGetMostRecentActionResponse = Event & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Event;
    };
};

/**
 * Contains response data for the advance operation.
 */
export type SimulatorSessionAdvanceResponse = Event & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Event;
    };
};
