/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/simulatorsMappers";
import * as Parameters from "../models/parameters";
import { SimulatorAPIContext } from "../simulatorAPIContext";

/** Class representing a Simulators. */
export class Simulators {
  private readonly client: SimulatorAPIContext;

  /**
   * Create a Simulators.
   * @param {SimulatorAPIContext} client Reference to the service client.
   */
  constructor(client: SimulatorAPIContext) {
    this.client = client;
  }

  /**
   * Retrieves all of the simulators currently registered with all
   * simulator gateways within this workspace.
   * The deployment_mode appears in the query string. It can be one of
   * Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means "not;"
   * e.g., .../simulators?deployment_mode=neq:Hosted means the response should not include
   * simulators that are hosted.
   * @summary Implementaton of the GET /v2/.../simulators endpoint.
   * @param workspaceName The workspace identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.SimulatorsListSimulatorsResponse>
   */
  listSimulators(workspaceName: string, options?: Models.SimulatorsListSimulatorsOptionalParams): Promise<Models.SimulatorsListSimulatorsResponse>;
  /**
   * @param workspaceName The workspace identifier.
   * @param callback The callback
   */
  listSimulators(workspaceName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param workspaceName The workspace identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSimulators(workspaceName: string, options: Models.SimulatorsListSimulatorsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  listSimulators(workspaceName: string, options?: Models.SimulatorsListSimulatorsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SimulatorsListSimulatorsResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        options
      },
      listSimulatorsOperationSpec,
      callback) as Promise<Models.SimulatorsListSimulatorsResponse>;
  }

  /**
   * Registers a simulator with the simulator gateway.
   * @summary Implementation of the PUT /v2/.../simulators endpoint.
   * @param workspaceName The workspace identifier.
   * @param registrationInfo Information and capabilities about the simulator.
   * @param [options] The optional parameters
   * @returns Promise<Models.SimulatorsRegisterSimulatorResponse>
   */
  registerSimulator(workspaceName: string, registrationInfo: Models.SimulatorInterface, options?: msRest.RequestOptionsBase): Promise<Models.SimulatorsRegisterSimulatorResponse>;
  /**
   * @param workspaceName The workspace identifier.
   * @param registrationInfo Information and capabilities about the simulator.
   * @param callback The callback
   */
  registerSimulator(workspaceName: string, registrationInfo: Models.SimulatorInterface, callback: msRest.ServiceCallback<Models.Event>): void;
  /**
   * @param workspaceName The workspace identifier.
   * @param registrationInfo Information and capabilities about the simulator.
   * @param options The optional parameters
   * @param callback The callback
   */
  registerSimulator(workspaceName: string, registrationInfo: Models.SimulatorInterface, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Event>): void;
  registerSimulator(workspaceName: string, registrationInfo: Models.SimulatorInterface, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Event>, callback?: msRest.ServiceCallback<Models.Event>): Promise<Models.SimulatorsRegisterSimulatorResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        registrationInfo,
        options
      },
      registerSimulatorOperationSpec,
      callback) as Promise<Models.SimulatorsRegisterSimulatorResponse>;
  }

  /**
   * Gets the most recent action sent to the simulator to process.
   * @summary Implementation of the GET /v2/.../simulators/{sessionId} endpoint.
   * @param workspaceName The workspace identifier.
   * @param sessionIdString Unique identification of the simulator.
   * @param [options] The optional parameters
   * @returns Promise<Models.SimulatorsGetMostRecentActionResponse>
   */
  getMostRecentAction(workspaceName: string, sessionIdString: string, options?: msRest.RequestOptionsBase): Promise<Models.SimulatorsGetMostRecentActionResponse>;
  /**
   * @param workspaceName The workspace identifier.
   * @param sessionIdString Unique identification of the simulator.
   * @param callback The callback
   */
  getMostRecentAction(workspaceName: string, sessionIdString: string, callback: msRest.ServiceCallback<Models.Event>): void;
  /**
   * @param workspaceName The workspace identifier.
   * @param sessionIdString Unique identification of the simulator.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMostRecentAction(workspaceName: string, sessionIdString: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Event>): void;
  getMostRecentAction(workspaceName: string, sessionIdString: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Event>, callback?: msRest.ServiceCallback<Models.Event>): Promise<Models.SimulatorsGetMostRecentActionResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sessionIdString,
        options
      },
      getMostRecentActionOperationSpec,
      callback) as Promise<Models.SimulatorsGetMostRecentActionResponse>;
  }

  /**
   * @summary Implementation of the POST /v2/.../simulators/{sessionId}
   * endpoint.
   * @param workspaceName The workspace identifier.
   * @param sessionIdString Unique identifier for the simulator.
   * @param state The new state of the simulator.
   * @param [options] The optional parameters
   * @returns Promise<Models.SimulatorsAdvanceResponse>
   */
  advance(workspaceName: string, sessionIdString: string, state: Models.SimulatorState, options?: msRest.RequestOptionsBase): Promise<Models.SimulatorsAdvanceResponse>;
  /**
   * @param workspaceName The workspace identifier.
   * @param sessionIdString Unique identifier for the simulator.
   * @param state The new state of the simulator.
   * @param callback The callback
   */
  advance(workspaceName: string, sessionIdString: string, state: Models.SimulatorState, callback: msRest.ServiceCallback<Models.Event>): void;
  /**
   * @param workspaceName The workspace identifier.
   * @param sessionIdString Unique identifier for the simulator.
   * @param state The new state of the simulator.
   * @param options The optional parameters
   * @param callback The callback
   */
  advance(workspaceName: string, sessionIdString: string, state: Models.SimulatorState, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Event>): void;
  advance(workspaceName: string, sessionIdString: string, state: Models.SimulatorState, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Event>, callback?: msRest.ServiceCallback<Models.Event>): Promise<Models.SimulatorsAdvanceResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sessionIdString,
        state,
        options
      },
      advanceOperationSpec,
      callback) as Promise<Models.SimulatorsAdvanceResponse>;
  }

  /**
   * Unregisters the simulator with the simulator gateway.
   * @summary Implementation of the DELETE /v2/.../simulators endpoint.
   * @param workspaceName The workspace identifier.
   * @param sessionIdString The session ID generated during registration
   * @param [options] The optional parameters
   * @returns Promise<Models.SimulatorsDeregisterSimulatorResponse>
   */
  deregisterSimulator(workspaceName: string, sessionIdString: string, options?: msRest.RequestOptionsBase): Promise<Models.SimulatorsDeregisterSimulatorResponse>;
  /**
   * @param workspaceName The workspace identifier.
   * @param sessionIdString The session ID generated during registration
   * @param callback The callback
   */
  deregisterSimulator(workspaceName: string, sessionIdString: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param workspaceName The workspace identifier.
   * @param sessionIdString The session ID generated during registration
   * @param options The optional parameters
   * @param callback The callback
   */
  deregisterSimulator(workspaceName: string, sessionIdString: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deregisterSimulator(workspaceName: string, sessionIdString: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.SimulatorsDeregisterSimulatorResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sessionIdString,
        options
      },
      deregisterSimulatorOperationSpec,
      callback) as Promise<Models.SimulatorsDeregisterSimulatorResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listSimulatorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/workspaces/{workspaceName}/simulators",
  urlParameters: [
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.deploymentMode
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SimulatorList
    },
    400: {
      bodyMapper: Mappers.ProblemDetails
    },
    default: {}
  },
  serializer
};

const registerSimulatorOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/workspaces/{workspaceName}/simulators",
  urlParameters: [
    Parameters.workspaceName
  ],
  requestBody: {
    parameterPath: "registrationInfo",
    mapper: {
      ...Mappers.SimulatorInterface,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Event
    },
    400: {
      bodyMapper: Mappers.Event
    },
    500: {
      bodyMapper: Mappers.Event
    },
    default: {}
  },
  serializer
};

const getMostRecentActionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/workspaces/{workspaceName}/simulators/{sessionIdString}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.sessionIdString
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Event
    },
    default: {}
  },
  serializer
};

const advanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/workspaces/{workspaceName}/simulators/{sessionIdString}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.sessionIdString
  ],
  requestBody: {
    parameterPath: "state",
    mapper: {
      ...Mappers.SimulatorState,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Event
    },
    default: {}
  },
  serializer
};

const deregisterSimulatorOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/workspaces/{workspaceName}/simulators/{sessionIdString}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.sessionIdString
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {}
  },
  serializer
};
