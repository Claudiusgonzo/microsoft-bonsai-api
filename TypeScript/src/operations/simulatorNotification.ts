/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/simulatorNotificationMappers";
import * as Parameters from "../models/parameters";
import { SimulatorAPIContext } from "../simulatorAPIContext";

/** Class representing a SimulatorNotification. */
export class SimulatorNotification {
  private readonly client: SimulatorAPIContext;

  /**
   * Create a SimulatorNotification.
   * @param {SimulatorAPIContext} client Reference to the service client.
   */
  constructor(client: SimulatorAPIContext) {
    this.client = client;
  }

  /**
   * @summary http post/negotiate endpoint to broker connection to Azure SignalR Service
   * @param workspaceName workspace information for subscription grain
   * @param sessionId simulator identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.SimulatorNotificationIndexResponse>
   */
  index(workspaceName: string, sessionId: string, options?: Models.SimulatorNotificationIndexOptionalParams): Promise<Models.SimulatorNotificationIndexResponse>;
  /**
   * @param workspaceName workspace information for subscription grain
   * @param sessionId simulator identifier
   * @param callback The callback
   */
  index(workspaceName: string, sessionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param workspaceName workspace information for subscription grain
   * @param sessionId simulator identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  index(workspaceName: string, sessionId: string, options: Models.SimulatorNotificationIndexOptionalParams, callback: msRest.ServiceCallback<void>): void;
  index(workspaceName: string, sessionId: string, options?: Models.SimulatorNotificationIndexOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.SimulatorNotificationIndexResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sessionId,
        options
      },
      indexOperationSpec,
      callback) as Promise<Models.SimulatorNotificationIndexResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const indexOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/workspaces/{workspaceName}/simulators/{sessionId}/simulatorHub/negotiate",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.sessionId
  ],
  queryParameters: [
    Parameters.user
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {}
  },
  serializer
};
