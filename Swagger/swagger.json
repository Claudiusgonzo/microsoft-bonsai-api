{
  "swagger": "2.0",
  "info": {
    "title": "Simulator API",
    "description": "This API allows simulators to provide states and receive commands from the platform.",
    "version": "v1"
  },
  "host": "api.bons.ai",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v2/workspaces/{workspaceName}/simulatorSessions": {
      "get": {
        "tags": [
          "SimulatorSession"
        ],
        "summary": "Retrieves all of the simulators currently registered with all\r\nsimulator gateways within this workspace.",
        "description": "The deployment_mode appears in the query string. It can be one of\r\nUnspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means \"not;\"\r\ne.g., {.../simulatorSessions?deployment_mode=neq:Hosted} means the response should not include\r\nsimulators that are hosted.\r\n            \r\nThe session_status can be one of Attachable, Attached, Detaching, Rejected,\r\nand supports the neq: prefix.\r\n            \r\nThe collection appears in the query string\r\n            \r\nThe package appears in the query string\r\n            \r\nThe filter queries can appear together, like\r\n{.../simulatorSessions?deployment_mode=Hosted&collection=1234-455-33333}",
        "operationId": "Session_List",
        "produces": [
          "application/json",
          "text/plain",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceName",
            "description": "The workspace identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "deployment_mode",
            "description": "A specifier to filter on deployment mode",
            "type": "string"
          },
          {
            "in": "query",
            "name": "session_status",
            "description": "A specifier to filter on session status",
            "type": "string"
          },
          {
            "in": "query",
            "name": "collection",
            "description": "If present, only sessions in this collection",
            "type": "string"
          },
          {
            "in": "query",
            "name": "package",
            "description": "If present, only sessions in this package",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SimulatorSessionSummary"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            },
            "x-ms-error-response": true
          }
        }
      },
      "post": {
        "tags": [
          "SimulatorSession"
        ],
        "summary": "Registers a simulator with the Bonsai platform.",
        "operationId": "Session_Create",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceName",
            "description": "The workspace identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Information and capabilities about the simulator.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SimulatorInterface"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SimulatorSessionResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/v2/workspaces/{workspaceName}/simulatorSessions/{sessionId}": {
      "get": {
        "tags": [
          "SimulatorSession"
        ],
        "summary": "Retrieves a simulator session corresponding to the sessionId",
        "operationId": "Session_Get",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceName",
            "description": "The workspace identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "description": "The sessionId of the simulator session to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SimulatorSessionResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            },
            "x-ms-error-response": true
          }
        }
      },
      "delete": {
        "tags": [
          "SimulatorSession"
        ],
        "summary": "Deletes the Simulator session",
        "operationId": "Session_Delete",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceName",
            "description": "The workspace identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "description": "The session ID generated during registration",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/v2/workspaces/{workspaceName}/simulatorSessions/{sessionId}/action": {
      "get": {
        "tags": [
          "SimulatorSession"
        ],
        "summary": "Gets the most recent action sent to the simulator to process.",
        "operationId": "Session_GetMostRecentAction",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceName",
            "description": "The workspace identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "description": "Unique identification of the simulator.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            },
            "x-ms-error-response": true
          }
        }
      }
    },
    "/v2/workspaces/{workspaceName}/simulatorSessions/{sessionId}/advance": {
      "post": {
        "tags": [
          "SimulatorSession"
        ],
        "summary": "Advance the RL agent with the new state of the simulator, and returns an action computed by our policy.\r\nSimulatorsession is supposed to use the returned action for stepping inside the sim and thne getting the new state.false\r\nYou can send the same state again, as long as you didn't get a Non-Idle Action back.",
        "operationId": "Session_Advance",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspaceName",
            "description": "The workspace identifier.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sessionId",
            "description": "Unique identifier for the simulator.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new state of the simulator.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SimulatorState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            },
            "x-ms-error-response": true
          }
        }
      }
    }
  },
  "definitions": {
    "SimulatorSession+Types+Status": {
      "enum": [
        "Deregistered",
        "Attachable",
        "Attached",
        "Detaching",
        "Rejected"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": false,
        "name": "SimulatorSession+Types+Status"
      }
    },
    "SimulatorContext+Types+DeploymentMode": {
      "enum": [
        "Unspecified",
        "Hosted",
        "Testing"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": false,
        "name": "SimulatorContext+Types+DeploymentMode"
      }
    },
    "Purpose+Types+Action": {
      "enum": [
        "Inactive",
        "Debug",
        "Train",
        "Assess"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": false,
        "name": "Purpose+Types+Action"
      }
    },
    "PurposeTarget": {
      "type": "object",
      "properties": {
        "workspaceName": {
          "type": "string"
        },
        "brainName": {
          "type": "string"
        },
        "brainVersion": {
          "format": "int32",
          "type": "integer"
        },
        "conceptName": {
          "type": "string"
        }
      }
    },
    "Purpose": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/Purpose+Types+Action"
        },
        "target": {
          "$ref": "#/definitions/PurposeTarget"
        }
      }
    },
    "SimulatorContext": {
      "type": "object",
      "properties": {
        "deploymentMode": {
          "$ref": "#/definitions/SimulatorContext+Types+DeploymentMode"
        },
        "deploymentDetails": {
          "type": "string"
        },
        "simulatorClientId": {
          "type": "string"
        },
        "collection": {
          "type": "string"
        },
        "package": {
          "type": "string"
        },
        "purpose": {
          "$ref": "#/definitions/Purpose"
        }
      }
    },
    "SimulatorSessionSummary": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        },
        "sessionStatus": {
          "$ref": "#/definitions/SimulatorSession+Types+Status"
        },
        "simulatorName": {
          "type": "string"
        },
        "simulatorContext": {
          "$ref": "#/definitions/SimulatorContext"
        }
      }
    },
    "ProblemDetails": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        }
      }
    },
    "SimulatorInterface": {
      "description": "It contains all the registration/creation time properties of a simulator session.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the simulator session.",
          "type": "string"
        },
        "timeout": {
          "format": "float",
          "description": "This is the max time in seconds, within which simulator need to send advance request, else it will be timed out and unregistered from Bonsai platform.\r\nSet it to (SimulatorComputeTime + RTT network latency + few seconds)\r\nDefault is 60s",
          "type": "number"
        },
        "capabilities": {
          "format": "object",
          "description": "Additional Capabilities for the session.",
          "type": "object"
        },
        "simulatorContext": {
          "description": "Opaque string to the sim authors. It's used to connect simulator sessions to right brain.false\r\nFor hosted sims, we automatically take care of setting the right environment variable for this. \r\nFor Local sims, set it to empty string, and use Bonsai CLI's, `bonsai connect` command.",
          "type": "string"
        },
        "description": {
          "format": "object",
          "description": "Schema descriptions of the simulator. Contains State, Action and Config schemas.",
          "type": "object"
        }
      }
    },
    "SimulatorSessionMilestone": {
      "description": "SimulatorSession progress milestone.",
      "type": "object",
      "properties": {
        "firstTime": {
          "format": "date-time",
          "description": "First time, this session made the specified progress.",
          "type": "string"
        }
      }
    },
    "SimulatorSessionProgress": {
      "description": "SimulatorSession progress related to train an actual brain.",
      "type": "object",
      "properties": {
        "attached": {
          "$ref": "#/definitions/SimulatorSessionMilestone"
        },
        "iterated": {
          "$ref": "#/definitions/SimulatorSessionMilestone"
        }
      }
    },
    "SimulatorSessionResponse": {
      "description": "SimulatorSession model, having details of one active simulator session.",
      "required": [
        "lastSeenTime",
        "registrationTime",
        "sessionId"
      ],
      "type": "object",
      "properties": {
        "sessionId": {
          "description": "Unique sessionId for this session.",
          "type": "string"
        },
        "sessionStatus": {
          "$ref": "#/definitions/SimulatorSession+Types+Status"
        },
        "sessionProgress": {
          "$ref": "#/definitions/SimulatorSessionProgress"
        },
        "interface": {
          "$ref": "#/definitions/SimulatorInterface"
        },
        "simulatorContext": {
          "$ref": "#/definitions/SimulatorContext"
        },
        "registrationTime": {
          "format": "date-time",
          "description": "Time, when this session was registered with Bonsai platform.",
          "type": "string"
        },
        "lastSeenTime": {
          "format": "date-time",
          "description": "Last time, when any request for this session was seen.",
          "type": "string"
        },
        "iterationRate": {
          "format": "double",
          "description": "Current IterationRate, 1 state-action loop is roughly maps to 1 iteration.",
          "type": "number"
        },
        "details": {
          "description": "Additional Details for this session provided by bonsai platform.",
          "type": "string"
        }
      }
    },
    "EventType": {
      "description": "Type of Event as response to advance method.",
      "enum": [
        "Unspecified",
        "EpisodeStart",
        "EpisodeStep",
        "EpisodeFinish",
        "Idle",
        "Unregister"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": false,
        "name": "EventType"
      }
    },
    "EpisodeStart": {
      "description": "EpisodeStart event. It's sent when a new episode need to be started.",
      "type": "object",
      "properties": {
        "config": {
          "format": "object",
          "description": "Initial configuration of simulation for starting an episode.",
          "type": "object"
        }
      }
    },
    "EpisodeStep": {
      "description": "EpisodeStep event for stepping inthe simulation. this is sent when there is an ongoing active episode.",
      "type": "object",
      "properties": {
        "action": {
          "format": "object",
          "description": "action decided by RL agent.null use this action to advance from current state of simulator.",
          "type": "object"
        }
      }
    },
    "EpisodeFinish+Reason": {
      "description": "Reason for episodeFinish",
      "enum": [
        "Invalid",
        "Unspecified",
        "LessonChanged",
        "Terminal",
        "Interrupted"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": false,
        "name": "EpisodeFinish+Reason"
      }
    },
    "EpisodeFinish": {
      "description": "EpisodeFinish event signalling current episode is finished.",
      "type": "object",
      "properties": {
        "reason": {
          "$ref": "#/definitions/EpisodeFinish+Reason"
        }
      }
    },
    "Idle": {
      "description": "Idle Event.null It means, that no RL action was yet available for this session.",
      "type": "object",
      "properties": {
        "callbackTime": {
          "format": "float",
          "description": "callback time in seconds. this mean,s you should wait for this much time before sending a new advance request.",
          "type": "number"
        }
      }
    },
    "Unregister+Reason": {
      "description": "Reason for unregister event.",
      "enum": [
        "Unspecified",
        "Finished",
        "Error",
        "NotFound"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": false,
        "name": "Unregister+Reason"
      }
    },
    "Unregister": {
      "description": "Event asking to unregister/delete simulatorSession.\r\nYou can create a new session, if you want to continue training with this simulator.",
      "type": "object",
      "properties": {
        "reason": {
          "$ref": "#/definitions/Unregister+Reason"
        },
        "details": {
          "description": "Detail message for unregister event.",
          "type": "string"
        }
      }
    },
    "Event": {
      "description": "RL action returned by bonsai platform when it got new state from simulator session.",
      "required": [
        "sequenceId",
        "sessionId",
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/EventType"
        },
        "sessionId": {
          "description": "unique session id.",
          "type": "string"
        },
        "sequenceId": {
          "format": "int32",
          "description": "Always startes with 1, and Bonsai platform increment it at each Step event in advance operation.static\r\nAlways just return the sequenceId returned by previous advance operation response.",
          "type": "integer"
        },
        "episodeStart": {
          "$ref": "#/definitions/EpisodeStart"
        },
        "episodeStep": {
          "$ref": "#/definitions/EpisodeStep"
        },
        "episodeFinish": {
          "$ref": "#/definitions/EpisodeFinish"
        },
        "idle": {
          "$ref": "#/definitions/Idle"
        },
        "unregister": {
          "$ref": "#/definitions/Unregister"
        }
      }
    },
    "SimulatorState": {
      "description": "It contains simulator state information needed by bonsai platform in response of an action.",
      "required": [
        "sequenceId"
      ],
      "type": "object",
      "properties": {
        "sequenceId": {
          "format": "int32",
          "description": "Always startes with 1, and Bonsai platform increment it at each Step event in advance operation.static\r\nAlways just return the sequenceId returned by previous advance operation response.",
          "type": "integer"
        },
        "state": {
          "format": "object",
          "description": "State of your simulator model.",
          "type": "object"
        },
        "halted": {
          "description": "Optional halt parameter to indicate, simulator wants to halt.\r\nImplicitly false when not present.",
          "type": "boolean"
        },
        "error": {
          "description": "No error if not defined or empty",
          "type": "string"
        }
      }
    }
  }
}