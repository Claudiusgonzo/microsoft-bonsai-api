// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bonsai.SimulatorAPI
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Simulators operations.
    /// </summary>
    public partial interface ISimulators
    {
        /// <summary>
        /// Implementaton of the GET /v2/.../simulators endpoint.
        /// </summary>
        /// <remarks>
        /// Retrieves all of the simulators currently registered with all
        /// simulator gateways within this workspace.
        /// The deployment_mode appears in the query string. It can be one of
        /// Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that
        /// means "not;"
        /// e.g., .../simulators?deployment_mode=neq:Hosted means the response
        /// should not include
        /// simulators that are hosted.
        /// </remarks>
        /// <param name='workspaceName'>
        /// The workspace identifier.
        /// </param>
        /// <param name='deploymentMode'>
        /// A specifier to filter on deployment mode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> ListSimulatorsWithHttpMessagesAsync(string workspaceName, string deploymentMode = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Implementation of the PUT /v2/.../simulators endpoint.
        /// </summary>
        /// <remarks>
        /// Registers a simulator with the simulator gateway.
        /// </remarks>
        /// <param name='workspaceName'>
        /// The workspace identifier.
        /// </param>
        /// <param name='registrationInfo'>
        /// Information and capabilities about the simulator.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EventModel>> RegisterSimulatorWithHttpMessagesAsync(string workspaceName, SimulatorInterface registrationInfo, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Implementation of the GET /v2/.../simulators/{sessionId} endpoint.
        /// </summary>
        /// <remarks>
        /// Gets the most recent action sent to the simulator to process.
        /// </remarks>
        /// <param name='workspaceName'>
        /// The workspace identifier.
        /// </param>
        /// <param name='sessionIdString'>
        /// Unique identification of the simulator.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EventModel>> GetMostRecentActionWithHttpMessagesAsync(string workspaceName, string sessionIdString, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Implementation of the POST /v2/.../simulators/{sessionId}
        /// endpoint.
        /// </summary>
        /// <param name='workspaceName'>
        /// The workspace identifier.
        /// </param>
        /// <param name='sessionIdString'>
        /// Unique identifier for the simulator.
        /// </param>
        /// <param name='state'>
        /// The new state of the simulator.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<EventModel>> AdvanceWithHttpMessagesAsync(string workspaceName, string sessionIdString, SimulatorState state, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Implementation of the DELETE /v2/.../simulators endpoint.
        /// </summary>
        /// <remarks>
        /// Unregisters the simulator with the simulator gateway.
        /// </remarks>
        /// <param name='workspaceName'>
        /// The workspace identifier.
        /// </param>
        /// <param name='sessionIdString'>
        /// The session ID generated during registration
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Stream>> DeregisterSimulatorWithHttpMessagesAsync(string workspaceName, string sessionIdString, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
