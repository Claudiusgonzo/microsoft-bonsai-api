// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bonsai.SimulatorAPI
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Simulators.
    /// </summary>
    public static partial class SimulatorsExtensions
    {
            /// <summary>
            /// Implementaton of the GET /v2/.../simulators endpoint.
            /// </summary>
            /// <remarks>
            /// Retrieves all of the simulators currently registered with all
            /// simulator gateways within this workspace.
            /// The deployment_mode appears in the query string. It can be one of
            /// Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means
            /// "not;"
            /// e.g., .../simulators?deployment_mode=neq:Hosted means the response should
            /// not include
            /// simulators that are hosted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='deploymentMode'>
            /// A specifier to filter on deployment mode
            /// </param>
            public static object ListSimulators(this ISimulators operations, string workspaceName, string deploymentMode = default(string))
            {
                return operations.ListSimulatorsAsync(workspaceName, deploymentMode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implementaton of the GET /v2/.../simulators endpoint.
            /// </summary>
            /// <remarks>
            /// Retrieves all of the simulators currently registered with all
            /// simulator gateways within this workspace.
            /// The deployment_mode appears in the query string. It can be one of
            /// Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means
            /// "not;"
            /// e.g., .../simulators?deployment_mode=neq:Hosted means the response should
            /// not include
            /// simulators that are hosted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='deploymentMode'>
            /// A specifier to filter on deployment mode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListSimulatorsAsync(this ISimulators operations, string workspaceName, string deploymentMode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSimulatorsWithHttpMessagesAsync(workspaceName, deploymentMode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implementation of the PUT /v2/.../simulators endpoint.
            /// </summary>
            /// <remarks>
            /// Registers a simulator with the simulator gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='registrationInfo'>
            /// Information and capabilities about the simulator.
            /// </param>
            public static EventModel RegisterSimulator(this ISimulators operations, string workspaceName, SimulatorInterface registrationInfo)
            {
                return operations.RegisterSimulatorAsync(workspaceName, registrationInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implementation of the PUT /v2/.../simulators endpoint.
            /// </summary>
            /// <remarks>
            /// Registers a simulator with the simulator gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='registrationInfo'>
            /// Information and capabilities about the simulator.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> RegisterSimulatorAsync(this ISimulators operations, string workspaceName, SimulatorInterface registrationInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterSimulatorWithHttpMessagesAsync(workspaceName, registrationInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implementation of the GET /v2/.../simulators/{sessionId} endpoint.
            /// </summary>
            /// <remarks>
            /// Gets the most recent action sent to the simulator to process.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='sessionIdString'>
            /// Unique identification of the simulator.
            /// </param>
            public static EventModel GetMostRecentAction(this ISimulators operations, string workspaceName, string sessionIdString)
            {
                return operations.GetMostRecentActionAsync(workspaceName, sessionIdString).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implementation of the GET /v2/.../simulators/{sessionId} endpoint.
            /// </summary>
            /// <remarks>
            /// Gets the most recent action sent to the simulator to process.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='sessionIdString'>
            /// Unique identification of the simulator.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> GetMostRecentActionAsync(this ISimulators operations, string workspaceName, string sessionIdString, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMostRecentActionWithHttpMessagesAsync(workspaceName, sessionIdString, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implementation of the POST /v2/.../simulators/{sessionId}
            /// endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='sessionIdString'>
            /// Unique identifier for the simulator.
            /// </param>
            /// <param name='state'>
            /// The new state of the simulator.
            /// </param>
            public static EventModel Advance(this ISimulators operations, string workspaceName, string sessionIdString, SimulatorState state)
            {
                return operations.AdvanceAsync(workspaceName, sessionIdString, state).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implementation of the POST /v2/.../simulators/{sessionId}
            /// endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='sessionIdString'>
            /// Unique identifier for the simulator.
            /// </param>
            /// <param name='state'>
            /// The new state of the simulator.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> AdvanceAsync(this ISimulators operations, string workspaceName, string sessionIdString, SimulatorState state, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdvanceWithHttpMessagesAsync(workspaceName, sessionIdString, state, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implementation of the DELETE /v2/.../simulators endpoint.
            /// </summary>
            /// <remarks>
            /// Unregisters the simulator with the simulator gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='sessionIdString'>
            /// The session ID generated during registration
            /// </param>
            public static Stream DeregisterSimulator(this ISimulators operations, string workspaceName, string sessionIdString)
            {
                return operations.DeregisterSimulatorAsync(workspaceName, sessionIdString).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implementation of the DELETE /v2/.../simulators endpoint.
            /// </summary>
            /// <remarks>
            /// Unregisters the simulator with the simulator gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace identifier.
            /// </param>
            /// <param name='sessionIdString'>
            /// The session ID generated during registration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> DeregisterSimulatorAsync(this ISimulators operations, string workspaceName, string sessionIdString, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.DeregisterSimulatorWithHttpMessagesAsync(workspaceName, sessionIdString, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

    }
}
