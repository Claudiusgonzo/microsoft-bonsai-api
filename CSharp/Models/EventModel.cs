// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Bonsai.SimulatorAPI.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class EventModel
    {
        /// <summary>
        /// Initializes a new instance of the EventModel class.
        /// </summary>
        public EventModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventModel class.
        /// </summary>
        public EventModel(int type, int sequenceId, int kindCase, string sessionId = default(string), EpisodeStart episodeStart = default(EpisodeStart), Step episodeStep = default(Step), EpisodeFinish episodeFinish = default(EpisodeFinish), object playbackStart = default(object), object playbackStep = default(object), object playbackFinish = default(object), Idle idle = default(Idle), object registered = default(object), Unregister unregister = default(Unregister))
        {
            Type = type;
            SessionId = sessionId;
            SequenceId = sequenceId;
            EpisodeStart = episodeStart;
            EpisodeStep = episodeStep;
            EpisodeFinish = episodeFinish;
            PlaybackStart = playbackStart;
            PlaybackStep = playbackStep;
            PlaybackFinish = playbackFinish;
            Idle = idle;
            Registered = registered;
            Unregister = unregister;
            KindCase = kindCase;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public int Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionId")]
        public string SessionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sequenceId")]
        public int SequenceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "episodeStart")]
        public EpisodeStart EpisodeStart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "episodeStep")]
        public Step EpisodeStep { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "episodeFinish")]
        public EpisodeFinish EpisodeFinish { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "playbackStart")]
        public object PlaybackStart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "playbackStep")]
        public object PlaybackStep { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "playbackFinish")]
        public object PlaybackFinish { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idle")]
        public Idle Idle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "registered")]
        public object Registered { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unregister")]
        public Unregister Unregister { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "kindCase")]
        public int KindCase { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EpisodeStart != null)
            {
                EpisodeStart.Validate();
            }
            if (EpisodeStep != null)
            {
                EpisodeStep.Validate();
            }
            if (EpisodeFinish != null)
            {
                EpisodeFinish.Validate();
            }
            if (Idle != null)
            {
                Idle.Validate();
            }
            if (Unregister != null)
            {
                Unregister.Validate();
            }
        }
    }
}
