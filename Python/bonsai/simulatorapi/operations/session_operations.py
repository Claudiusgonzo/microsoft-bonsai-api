# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError

from .. import models


class SessionOperations(object):
    """SessionOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def list(
            self, workspace_name, deployment_mode=None, session_status=None, collection=None, package=None, custom_headers=None, raw=False, **operation_config):
        """Implementaton of the GET /v2/.../simulatorSessions endpoint.

        Retrieves all of the simulators currently registered with all
        simulator gateways within this workspace.
        The deployment_mode appears in the query string. It can be one of
        Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means
        "not;"
        e.g., {.../simulatorSessions?deployment_mode=neq:Hosted} means the
        response should not include
        simulators that are hosted.
        The session_status can be one of Attachable, Attached, Detaching,
        Rejected,
        and supports the neq: prefix.
        The collection appears in the query string
        The package appears in the query string
        The filter queries can appear together, like
        {.../simulatorSessions?deployment_mode=Hosted&collection=1234-455-33333}.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param deployment_mode: A specifier to filter on deployment mode
        :type deployment_mode: str
        :param session_status: A specifier to filter on session status
        :type session_status: str
        :param collection: If present, only sessions in this collection
        :type collection: str
        :param package: If present, only sessions in this package
        :type package: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if deployment_mode is not None:
            query_parameters['deployment_mode'] = self._serialize.query("deployment_mode", deployment_mode, 'str')
        if session_status is not None:
            query_parameters['session_status'] = self._serialize.query("session_status", session_status, 'str')
        if collection is not None:
            query_parameters['collection'] = self._serialize.query("collection", collection, 'str')
        if package is not None:
            query_parameters['package'] = self._serialize.query("package", package, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[SimulatorSessionSummary]', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ProblemDetails', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list.metadata = {'url': '/v2/workspaces/{workspaceName}/simulatorSessions'}

    def create(
            self, workspace_name, body=None, custom_headers=None, raw=False, **operation_config):
        """Implementation of the POST /v2/.../simulatorSessions endpoint.

        Registers a simulator with the simulator gateway.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param body: Information and capabilities about the simulator.
        :type body: ~bonsai.simulatorapi.models.SimulatorInterface
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'SimulatorInterface')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [201, 400, 500, 503]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('SimulatorSessionResponse', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ProblemDetails', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create.metadata = {'url': '/v2/workspaces/{workspaceName}/simulatorSessions'}

    def get(
            self, workspace_name, session_id, custom_headers=None, raw=False, **operation_config):
        """Implementation of the GET /v2/.../simulatorSessions/{sessionId}
        endpoint.

        Retrieves a simulator session corresponding to the sessionId.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param session_id: The sessionId of the simulator session to fetch
        :type session_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'sessionId': self._serialize.url("session_id", session_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SimulatorSessionResponse', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ProblemDetails', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ProblemDetails', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get.metadata = {'url': '/v2/workspaces/{workspaceName}/simulatorSessions/{sessionId}'}

    def delete(
            self, workspace_name, session_id, custom_headers=None, raw=False, **operation_config):
        """Implementation of the DELETE /v2/.../simulators endpoint.

        Unregisters the simulator with the simulator gateway.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param session_id: The session ID generated during registration
        :type session_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: ProblemDetails or ClientRawResponse if raw=true
        :rtype: ~bonsai.simulatorapi.models.ProblemDetails or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'sessionId': self._serialize.url("session_id", session_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [204, 400, 404, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 400:
            deserialized = self._deserialize('ProblemDetails', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ProblemDetails', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    delete.metadata = {'url': '/v2/workspaces/{workspaceName}/simulatorSessions/{sessionId}'}

    def get_most_recent_action(
            self, workspace_name, session_id, custom_headers=None, raw=False, **operation_config):
        """Implementation of the GET /v2/.../simulatorSessions/{sessionId}/action
        endpoint.

        Gets the most recent action sent to the simulator to process.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param session_id: Unique identification of the simulator.
        :type session_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Event or ClientRawResponse if raw=true
        :rtype: ~bonsai.simulatorapi.models.Event or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_most_recent_action.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'sessionId': self._serialize.url("session_id", session_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Event', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_most_recent_action.metadata = {'url': '/v2/workspaces/{workspaceName}/simulatorSessions/{sessionId}/action'}

    def advance(
            self, workspace_name, session_id, body=None, custom_headers=None, raw=False, **operation_config):
        """Implementation of the POST
        /v2/.../simulatorSessions/{sessionId}/advance
        endpoint.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param session_id: Unique identifier for the simulator.
        :type session_id: str
        :param body: The new state of the simulator.
        :type body: ~bonsai.simulatorapi.models.SimulatorState
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Event or ClientRawResponse if raw=true
        :rtype: ~bonsai.simulatorapi.models.Event or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.advance.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'sessionId': self._serialize.url("session_id", session_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body is not None:
            body_content = self._serialize.body(body, 'SimulatorState')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Event', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    advance.metadata = {'url': '/v2/workspaces/{workspaceName}/simulatorSessions/{sessionId}/advance'}
