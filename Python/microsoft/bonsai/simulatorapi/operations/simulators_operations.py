# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError

from .. import models


class SimulatorsOperations(object):
    """SimulatorsOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def list_simulators(
            self, workspace_name, deployment_mode=None, custom_headers=None, raw=False, **operation_config):
        """Implementaton of the GET /v2/.../simulators endpoint.

        Retrieves all of the simulators currently registered with all
        simulator gateways within this workspace.
        The deployment_mode appears in the query string. It can be one of
        Unspecified, Testing, or Hosted. If it has a 'neq:' prefix, that means
        "not;"
        e.g., .../simulators?deployment_mode=neq:Hosted means the response
        should not include
        simulators that are hosted.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param deployment_mode: A specifier to filter on deployment mode
        :type deployment_mode: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_simulators.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if deployment_mode is not None:
            query_parameters['deployment_mode'] = self._serialize.query("deployment_mode", deployment_mode, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SimulatorList', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ProblemDetails', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_simulators.metadata = {'url': '/v2/workspaces/{workspaceName}/simulators'}

    def register_simulator(
            self, workspace_name, registration_info, custom_headers=None, raw=False, **operation_config):
        """Implementation of the PUT /v2/.../simulators endpoint.

        Registers a simulator with the simulator gateway.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param registration_info: Information and capabilities about the
         simulator.
        :type registration_info:
         ~microsoft.bonsai.simulatorapi.models.SimulatorInterface
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Event or ClientRawResponse if raw=true
        :rtype: ~microsoft.bonsai.simulatorapi.models.Event or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.register_simulator.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(registration_info, 'SimulatorInterface')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Event', response)
        if response.status_code == 400:
            deserialized = self._deserialize('Event', response)
        if response.status_code == 500:
            deserialized = self._deserialize('Event', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    register_simulator.metadata = {'url': '/v2/workspaces/{workspaceName}/simulators'}

    def get_most_recent_action(
            self, workspace_name, session_id_string, custom_headers=None, raw=False, **operation_config):
        """Implementation of the GET /v2/.../simulators/{sessionId} endpoint.

        Gets the most recent action sent to the simulator to process.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param session_id_string: Unique identification of the simulator.
        :type session_id_string: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Event or ClientRawResponse if raw=true
        :rtype: ~microsoft.bonsai.simulatorapi.models.Event or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_most_recent_action.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'sessionIdString': self._serialize.url("session_id_string", session_id_string, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Event', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_most_recent_action.metadata = {'url': '/v2/workspaces/{workspaceName}/simulators/{sessionIdString}'}

    def advance(
            self, workspace_name, session_id_string, state, custom_headers=None, raw=False, **operation_config):
        """Implementation of the POST /v2/.../simulators/{sessionId}
        endpoint.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param session_id_string: Unique identifier for the simulator.
        :type session_id_string: str
        :param state: The new state of the simulator.
        :type state: ~microsoft.bonsai.simulatorapi.models.SimulatorState
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Event or ClientRawResponse if raw=true
        :rtype: ~microsoft.bonsai.simulatorapi.models.Event or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.advance.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'sessionIdString': self._serialize.url("session_id_string", session_id_string, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(state, 'SimulatorState')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Event', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    advance.metadata = {'url': '/v2/workspaces/{workspaceName}/simulators/{sessionIdString}'}

    def deregister_simulator(
            self, workspace_name, session_id_string, custom_headers=None, raw=False, callback=None, **operation_config):
        """Implementation of the DELETE /v2/.../simulators endpoint.

        Unregisters the simulator with the simulator gateway.

        :param workspace_name: The workspace identifier.
        :type workspace_name: str
        :param session_id_string: The session ID generated during registration
        :type session_id_string: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param callback: When specified, will be called with each chunk of
         data that is streamed. The callback should take two arguments, the
         bytes of the current chunk of data and the response object. If the
         data is uploading, response will be None.
        :type callback: Callable[Bytes, response=None]
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: Generator or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.deregister_simulator.metadata['url']
        path_format_arguments = {
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'sessionIdString': self._serialize.url("session_id_string", session_id_string, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=True, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._client.stream_download(response, callback)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    deregister_simulator.metadata = {'url': '/v2/workspaces/{workspaceName}/simulators/{sessionIdString}'}
