# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6282, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._simulator_api_enums import *


class EpisodeFinish(msrest.serialization.Model):
    """EpisodeFinish.

    :param reason:  Possible values include: "Invalid", "Unspecified", "LessonChanged", "Terminal",
     "Interrupted".
    :type reason: str or ~microsoft.bonsai.simulatorapi.models.EpisodeFinishTypesReason
    """

    _attribute_map = {
        'reason': {'key': 'reason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        reason: Optional[Union[str, "EpisodeFinishTypesReason"]] = None,
        **kwargs
    ):
        super(EpisodeFinish, self).__init__(**kwargs)
        self.reason = reason


class EpisodeStart(msrest.serialization.Model):
    """EpisodeStart.

    :param config: Any object.
    :type config: object
    """

    _attribute_map = {
        'config': {'key': 'config', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        config: Optional[object] = None,
        **kwargs
    ):
        super(EpisodeStart, self).__init__(**kwargs)
        self.config = config


class Event(msrest.serialization.Model):
    """Event.

    :param type:  Possible values include: "Unspecified", "EpisodeStart", "EpisodeStep",
     "EpisodeFinish", "PlaybackStart", "PlaybackStep", "PlaybackFinish", "Idle", "Registered",
     "Unregister".
    :type type: str or ~microsoft.bonsai.simulatorapi.models.EventTypesEventType
    :param session_id:
    :type session_id: str
    :param sequence_id:
    :type sequence_id: int
    :param episode_start:
    :type episode_start: ~microsoft.bonsai.simulatorapi.models.EpisodeStart
    :param episode_step:
    :type episode_step: ~microsoft.bonsai.simulatorapi.models.Step
    :param episode_finish:
    :type episode_finish: ~microsoft.bonsai.simulatorapi.models.EpisodeFinish
    :param playback_start: Any object.
    :type playback_start: object
    :param playback_step: Any object.
    :type playback_step: object
    :param playback_finish: Any object.
    :type playback_finish: object
    :param idle:
    :type idle: ~microsoft.bonsai.simulatorapi.models.Idle
    :param registered: Any object.
    :type registered: object
    :param unregister:
    :type unregister: ~microsoft.bonsai.simulatorapi.models.Unregister
    :param kind_case:  Possible values include: "None", "EpisodeStart", "EpisodeStep",
     "EpisodeFinish", "PlaybackStart", "PlaybackStep", "PlaybackFinish", "Idle", "Registered",
     "Unregister".
    :type kind_case: str or ~microsoft.bonsai.simulatorapi.models.EventKindOneofCase
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'sequence_id': {'key': 'sequenceId', 'type': 'int'},
        'episode_start': {'key': 'episodeStart', 'type': 'EpisodeStart'},
        'episode_step': {'key': 'episodeStep', 'type': 'Step'},
        'episode_finish': {'key': 'episodeFinish', 'type': 'EpisodeFinish'},
        'playback_start': {'key': 'playbackStart', 'type': 'object'},
        'playback_step': {'key': 'playbackStep', 'type': 'object'},
        'playback_finish': {'key': 'playbackFinish', 'type': 'object'},
        'idle': {'key': 'idle', 'type': 'Idle'},
        'registered': {'key': 'registered', 'type': 'object'},
        'unregister': {'key': 'unregister', 'type': 'Unregister'},
        'kind_case': {'key': 'kindCase', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "EventTypesEventType"]] = None,
        session_id: Optional[str] = None,
        sequence_id: Optional[int] = None,
        episode_start: Optional["EpisodeStart"] = None,
        episode_step: Optional["Step"] = None,
        episode_finish: Optional["EpisodeFinish"] = None,
        playback_start: Optional[object] = None,
        playback_step: Optional[object] = None,
        playback_finish: Optional[object] = None,
        idle: Optional["Idle"] = None,
        registered: Optional[object] = None,
        unregister: Optional["Unregister"] = None,
        kind_case: Optional[Union[str, "EventKindOneofCase"]] = None,
        **kwargs
    ):
        super(Event, self).__init__(**kwargs)
        self.type = type
        self.session_id = session_id
        self.sequence_id = sequence_id
        self.episode_start = episode_start
        self.episode_step = episode_step
        self.episode_finish = episode_finish
        self.playback_start = playback_start
        self.playback_step = playback_step
        self.playback_finish = playback_finish
        self.idle = idle
        self.registered = registered
        self.unregister = unregister
        self.kind_case = kind_case


class Idle(msrest.serialization.Model):
    """Idle.

    :param callback_time:
    :type callback_time: float
    """

    _attribute_map = {
        'callback_time': {'key': 'callbackTime', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        callback_time: Optional[float] = None,
        **kwargs
    ):
        super(Idle, self).__init__(**kwargs)
        self.callback_time = callback_time


class ProblemDetails(msrest.serialization.Model):
    """ProblemDetails.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param type:
    :type type: str
    :param title:
    :type title: str
    :param status:
    :type status: int
    :param detail:
    :type detail: str
    :param instance:
    :type instance: str
    :ivar extensions: Dictionary of :code:`<any>`.
    :vartype extensions: dict[str, object]
    """

    _validation = {
        'extensions': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'status': {'key': 'status', 'type': 'int'},
        'detail': {'key': 'detail', 'type': 'str'},
        'instance': {'key': 'instance', 'type': 'str'},
        'extensions': {'key': 'extensions', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        title: Optional[str] = None,
        status: Optional[int] = None,
        detail: Optional[str] = None,
        instance: Optional[str] = None,
        **kwargs
    ):
        super(ProblemDetails, self).__init__(**kwargs)
        self.type = type
        self.title = title
        self.status = status
        self.detail = detail
        self.instance = instance
        self.extensions = None


class Purpose(msrest.serialization.Model):
    """Purpose.

    :param action:  Possible values include: "Inactive", "Debug", "Train", "Assess".
    :type action: str or ~microsoft.bonsai.simulatorapi.models.PurposeTypesAction
    :param target:
    :type target: ~microsoft.bonsai.simulatorapi.models.PurposeTarget
    """

    _attribute_map = {
        'action': {'key': 'action', 'type': 'str'},
        'target': {'key': 'target', 'type': 'PurposeTarget'},
    }

    def __init__(
        self,
        *,
        action: Optional[Union[str, "PurposeTypesAction"]] = None,
        target: Optional["PurposeTarget"] = None,
        **kwargs
    ):
        super(Purpose, self).__init__(**kwargs)
        self.action = action
        self.target = target


class PurposeTarget(msrest.serialization.Model):
    """PurposeTarget.

    :param workspace_name:
    :type workspace_name: str
    :param brain_name:
    :type brain_name: str
    :param brain_version:
    :type brain_version: int
    :param concept_name:
    :type concept_name: str
    """

    _attribute_map = {
        'workspace_name': {'key': 'workspaceName', 'type': 'str'},
        'brain_name': {'key': 'brainName', 'type': 'str'},
        'brain_version': {'key': 'brainVersion', 'type': 'int'},
        'concept_name': {'key': 'conceptName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        workspace_name: Optional[str] = None,
        brain_name: Optional[str] = None,
        brain_version: Optional[int] = None,
        concept_name: Optional[str] = None,
        **kwargs
    ):
        super(PurposeTarget, self).__init__(**kwargs)
        self.workspace_name = workspace_name
        self.brain_name = brain_name
        self.brain_version = brain_version
        self.concept_name = concept_name


class SimulatorContext(msrest.serialization.Model):
    """SimulatorContext.

    :param deployment_mode:  Possible values include: "Unspecified", "Hosted", "Testing".
    :type deployment_mode: str or
     ~microsoft.bonsai.simulatorapi.models.SimulatorContextTypesDeploymentMode
    :param deployment_details:
    :type deployment_details: str
    :param simulator_client_id:
    :type simulator_client_id: str
    :param collection:
    :type collection: str
    :param package:
    :type package: str
    :param purpose:
    :type purpose: ~microsoft.bonsai.simulatorapi.models.Purpose
    """

    _attribute_map = {
        'deployment_mode': {'key': 'deploymentMode', 'type': 'str'},
        'deployment_details': {'key': 'deploymentDetails', 'type': 'str'},
        'simulator_client_id': {'key': 'simulatorClientId', 'type': 'str'},
        'collection': {'key': 'collection', 'type': 'str'},
        'package': {'key': 'package', 'type': 'str'},
        'purpose': {'key': 'purpose', 'type': 'Purpose'},
    }

    def __init__(
        self,
        *,
        deployment_mode: Optional[Union[str, "SimulatorContextTypesDeploymentMode"]] = None,
        deployment_details: Optional[str] = None,
        simulator_client_id: Optional[str] = None,
        collection: Optional[str] = None,
        package: Optional[str] = None,
        purpose: Optional["Purpose"] = None,
        **kwargs
    ):
        super(SimulatorContext, self).__init__(**kwargs)
        self.deployment_mode = deployment_mode
        self.deployment_details = deployment_details
        self.simulator_client_id = simulator_client_id
        self.collection = collection
        self.package = package
        self.purpose = purpose


class SimulatorInterface(msrest.serialization.Model):
    """SimulatorInterface.

    :param name:
    :type name: str
    :param timeout:
    :type timeout: float
    :param capabilities: Any object.
    :type capabilities: object
    :param simulator_context:
    :type simulator_context: str
    :param description: Any object.
    :type description: object
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'timeout': {'key': 'timeout', 'type': 'float'},
        'capabilities': {'key': 'capabilities', 'type': 'object'},
        'simulator_context': {'key': 'simulatorContext', 'type': 'str'},
        'description': {'key': 'description', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        timeout: Optional[float] = None,
        capabilities: Optional[object] = None,
        simulator_context: Optional[str] = None,
        description: Optional[object] = None,
        **kwargs
    ):
        super(SimulatorInterface, self).__init__(**kwargs)
        self.name = name
        self.timeout = timeout
        self.capabilities = capabilities
        self.simulator_context = simulator_context
        self.description = description


class SimulatorSessionMilestone(msrest.serialization.Model):
    """SimulatorSession progress milestone.

    :param first_time: First time, this session made the specified progress.
    :type first_time: ~datetime.datetime
    """

    _attribute_map = {
        'first_time': {'key': 'firstTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        first_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SimulatorSessionMilestone, self).__init__(**kwargs)
        self.first_time = first_time


class SimulatorSessionProgress(msrest.serialization.Model):
    """SimulatorSession progress related to train an actual brain.

    :param attached: SimulatorSession progress milestone.
    :type attached: ~microsoft.bonsai.simulatorapi.models.SimulatorSessionMilestone
    :param iterated: SimulatorSession progress milestone.
    :type iterated: ~microsoft.bonsai.simulatorapi.models.SimulatorSessionMilestone
    """

    _attribute_map = {
        'attached': {'key': 'attached', 'type': 'SimulatorSessionMilestone'},
        'iterated': {'key': 'iterated', 'type': 'SimulatorSessionMilestone'},
    }

    def __init__(
        self,
        *,
        attached: Optional["SimulatorSessionMilestone"] = None,
        iterated: Optional["SimulatorSessionMilestone"] = None,
        **kwargs
    ):
        super(SimulatorSessionProgress, self).__init__(**kwargs)
        self.attached = attached
        self.iterated = iterated


class SimulatorSessionResponse(msrest.serialization.Model):
    """SimulatorSession model, having details of one active simulator session.

    All required parameters must be populated in order to send to Azure.

    :param session_id: Required. Unique sessionId for this session.
    :type session_id: str
    :param session_status:  Possible values include: "Deregistered", "Attachable", "Attached",
     "Detaching", "Rejected".
    :type session_status: str or ~microsoft.bonsai.simulatorapi.models.SimulatorSessionTypesStatus
    :param session_progress: SimulatorSession progress related to train an actual brain.
    :type session_progress: ~microsoft.bonsai.simulatorapi.models.SimulatorSessionProgress
    :param interface:
    :type interface: ~microsoft.bonsai.simulatorapi.models.SimulatorInterface
    :param simulator_context:
    :type simulator_context: ~microsoft.bonsai.simulatorapi.models.SimulatorContext
    :param registration_time: Required. Time, when this session was registered with Bonsai
     platform.
    :type registration_time: ~datetime.datetime
    :param last_seen_time: Required. Last time, when any request for this session was seen.
    :type last_seen_time: ~datetime.datetime
    :param iteration_rate: Current IterationRate, 1 state-action loop is roughly maps to 1
     iteration.
    :type iteration_rate: float
    :param details: Additional Details for this session provided by bonsai platform.
    :type details: str
    """

    _validation = {
        'session_id': {'required': True},
        'registration_time': {'required': True},
        'last_seen_time': {'required': True},
    }

    _attribute_map = {
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'session_status': {'key': 'sessionStatus', 'type': 'str'},
        'session_progress': {'key': 'sessionProgress', 'type': 'SimulatorSessionProgress'},
        'interface': {'key': 'interface', 'type': 'SimulatorInterface'},
        'simulator_context': {'key': 'simulatorContext', 'type': 'SimulatorContext'},
        'registration_time': {'key': 'registrationTime', 'type': 'iso-8601'},
        'last_seen_time': {'key': 'lastSeenTime', 'type': 'iso-8601'},
        'iteration_rate': {'key': 'iterationRate', 'type': 'float'},
        'details': {'key': 'details', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        session_id: str,
        registration_time: datetime.datetime,
        last_seen_time: datetime.datetime,
        session_status: Optional[Union[str, "SimulatorSessionTypesStatus"]] = None,
        session_progress: Optional["SimulatorSessionProgress"] = None,
        interface: Optional["SimulatorInterface"] = None,
        simulator_context: Optional["SimulatorContext"] = None,
        iteration_rate: Optional[float] = None,
        details: Optional[str] = None,
        **kwargs
    ):
        super(SimulatorSessionResponse, self).__init__(**kwargs)
        self.session_id = session_id
        self.session_status = session_status
        self.session_progress = session_progress
        self.interface = interface
        self.simulator_context = simulator_context
        self.registration_time = registration_time
        self.last_seen_time = last_seen_time
        self.iteration_rate = iteration_rate
        self.details = details


class SimulatorSessionSummary(msrest.serialization.Model):
    """SimulatorSessionSummary.

    :param session_id:
    :type session_id: str
    :param session_status:  Possible values include: "Deregistered", "Attachable", "Attached",
     "Detaching", "Rejected".
    :type session_status: str or ~microsoft.bonsai.simulatorapi.models.SimulatorSessionTypesStatus
    :param simulator_name:
    :type simulator_name: str
    :param simulator_context:
    :type simulator_context: ~microsoft.bonsai.simulatorapi.models.SimulatorContext
    """

    _attribute_map = {
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'session_status': {'key': 'sessionStatus', 'type': 'str'},
        'simulator_name': {'key': 'simulatorName', 'type': 'str'},
        'simulator_context': {'key': 'simulatorContext', 'type': 'SimulatorContext'},
    }

    def __init__(
        self,
        *,
        session_id: Optional[str] = None,
        session_status: Optional[Union[str, "SimulatorSessionTypesStatus"]] = None,
        simulator_name: Optional[str] = None,
        simulator_context: Optional["SimulatorContext"] = None,
        **kwargs
    ):
        super(SimulatorSessionSummary, self).__init__(**kwargs)
        self.session_id = session_id
        self.session_status = session_status
        self.simulator_name = simulator_name
        self.simulator_context = simulator_context


class SimulatorState(msrest.serialization.Model):
    """SimulatorState.

    :param session_id:
    :type session_id: str
    :param sequence_id:
    :type sequence_id: int
    :param state: Any object.
    :type state: object
    :param halted:
    :type halted: bool
    :param error:
    :type error: str
    """

    _attribute_map = {
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'sequence_id': {'key': 'sequenceId', 'type': 'int'},
        'state': {'key': 'state', 'type': 'object'},
        'halted': {'key': 'halted', 'type': 'bool'},
        'error': {'key': 'error', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        session_id: Optional[str] = None,
        sequence_id: Optional[int] = None,
        state: Optional[object] = None,
        halted: Optional[bool] = None,
        error: Optional[str] = None,
        **kwargs
    ):
        super(SimulatorState, self).__init__(**kwargs)
        self.session_id = session_id
        self.sequence_id = sequence_id
        self.state = state
        self.halted = halted
        self.error = error


class Step(msrest.serialization.Model):
    """Step.

    :param action: Any object.
    :type action: object
    """

    _attribute_map = {
        'action': {'key': 'action', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        action: Optional[object] = None,
        **kwargs
    ):
        super(Step, self).__init__(**kwargs)
        self.action = action


class Unregister(msrest.serialization.Model):
    """Unregister.

    :param reason:  Possible values include: "Unspecified", "Finished", "Error", "NotFound".
    :type reason: str or ~microsoft.bonsai.simulatorapi.models.UnregisterTypesReason
    :param details:
    :type details: str
    """

    _attribute_map = {
        'reason': {'key': 'reason', 'type': 'str'},
        'details': {'key': 'details', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        reason: Optional[Union[str, "UnregisterTypesReason"]] = None,
        details: Optional[str] = None,
        **kwargs
    ):
        super(Unregister, self).__init__(**kwargs)
        self.reason = reason
        self.details = details
